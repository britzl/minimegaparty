local input = require "ludobits.m.input"
local flow = require "ludobits.m.flow"

go.property("power", 5)

function init(self)
	self.players = {}
	--msg.post(".", "start", { { action_id = hash("KEY_Q"), player_id = 1, action_name = "Q" } })
	self.ball_position = go.get_position("ball")
	msg.post("power", "disable")
	msg.post("powerbar", "disable")
end

function final(self)
	input.release()
end

function update(self, dt)
	flow.update(dt)
	go.set_scale(vmath.vector3(math.max(0.05, self.power / 1000), 1, 1), "power")
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == hash("start") then
		self.players = message
		for _,player in ipairs(self.players) do
			player.win = false
			label.set_text("player" .. player.player_id .. "#action", player.action_name)
			go.animate("player" .. player.player_id, "position.y", go.PLAYBACK_ONCE_FORWARD, 31, go.EASING_INQUAD, 0.4)
		end
		for i=#self.players+1,4 do
			go.delete("player" .. i)
		end
		flow(function()
			flow.delay(0.4)
			for _,player in ipairs(self.players) do
				-- move the current player up to the ball
				local player_pos = go.get_position("player" .. player.player_id)
				flow.go_animate("player" .. player.player_id, "position.x", go.PLAYBACK_ONCE_FORWARD, self.ball_position.x - 15, go.EASING_INQUAD, 0.4, 0)

				-- enable the power bar
				msg.post("power", "enable")
				msg.post("powerbar", "enable")
				go.cancel_animations("#", "power")
				self.power = 5
				go.animate("#", "power", go.PLAYBACK_LOOP_PINGPONG, 1000, go.EASING_LINEAR, 0.7)

				-- enable input and wait for a swing
				input.acquire()
				player.waiting = true
				flow.until_true(function() return player.swing end)
				player.waiting = false
				input.release()
				
				-- move the player back to the group and wait a reasonable amount of time before letting the next player swing
				flow.go_animate("player" .. player.player_id, "position.x", go.PLAYBACK_ONCE_FORWARD, player_pos.x, go.EASING_INQUAD, 0.4, 0.1)
				msg.post("power", "disable")
				msg.post("powerbar", "disable")
				flow.delay(3)
				player.swing = false

				-- reset ball
				msg.post("ball", "disable")
				go.set_position(self.ball_position, "ball")
				msg.post("ball", "enable")
				
			end
			msg.post("main:/main", "game_over", self.players)
		end)
	elseif message_id == hash("trigger_response") then
		for _,player in pairs(self.players) do
			if player.swing then
				player.win = message.enter
			end
		end
	end
end

function on_input(self, action_id, action)
	if action.released then
		for i,player in pairs(self.players) do
			if player.action_id == action_id and player.waiting then
				player.swing = true
				go.cancel_animations("#", "power")
				local force = vmath.vector3(1, 1.5, 0) * self.power * 200
				print(self.power, force)
				msg.post("ball#collisionobject", "apply_force", { force = force, position = self.ball_position })
				msg.post("#hitsound", "play_sound", { delay = 0, gain = 1.0 })
			end
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
